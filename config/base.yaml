api:
  reboot_timeout:
    hours: 24

ota:
  platform: esphome

web_server:
  port: 80

# Example configuration entry
time:
  - platform: sntp
    timezone: Etc/EST
    id: sntp_time
    servers:
      - 192.168.0.20
      - 192.168.0.30
    on_time:
      # Daily restart at 3:00 AM for hot water devices
      - seconds: 0
        minutes: 0
        hours: 3
        then:
          - if:
              condition:
                lambda: |-
                  // Only restart if this device has a hot water relay
                  return id("${device_id}_relay").has_state();
              then:
                - switch.turn_off: "${device_id}_relay"
                - delay: 30s
                - switch.turn_on: "${device_id}_relay"
        
sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    id: ${device_id}_signal

text_sensor:
  - platform: version
    name: ${friendly_name} Version
    id: ${device_id}_version
  
  # WiFi information sensors using template platform for reliability
  - platform: template
    name: ${friendly_name} WiFi SSID
    id: ${device_id}_ssid
    lambda: |-
      return {WiFi.SSID().c_str()};
    update_interval: 5s
    
  - platform: template
    name: ${friendly_name} WiFi BSSID
    id: ${device_id}_bssid
    lambda: |-
      return {WiFi.BSSIDstr().c_str()};
    update_interval: 5s
    
  - platform: template
    name: ${friendly_name} WiFi MAC
    id: ${device_id}_mac
    lambda: |-
      return {WiFi.macAddress().c_str()};
    update_interval: 5s
    
  - platform: template
    name: ${friendly_name} IP Address
    id: ${device_id}_ip
    lambda: |-
      return {WiFi.localIP().toString().c_str()};
    update_interval: 5s
      
  - platform: template
    name: ${friendly_name} Time
    id: ${device_id}_time
    lambda: |-
      char str[17];
      time_t currTime = id(sntp_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return { str };
<<: !include wifi.yaml
