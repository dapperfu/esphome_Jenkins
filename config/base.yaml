api:
  reboot_timeout:
    hours: 24

ota:
  platform: esphome

web_server:
  port: 80

logger:
  # Suppress web_server EventSource connection warnings - these are harmless
  # warnings about cleaning up dead client connections and don't indicate a problem
  logs:
    web_server: ERROR

# Example configuration entry
time:
  - platform: sntp
    timezone: Etc/EST
    id: sntp_time
    servers:
      - 192.168.0.20
      - 192.168.0.30
    # Daily restart automation removed - devices that need this should override
    # the time section in their device-specific configs (see hotwater_plug.yaml)
        
sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    id: ${device_id}_signal

text_sensor:
  - platform: version
    name: ${friendly_name} Version
    id: ${device_id}_version
  
  # WiFi information sensors using built-in wifi_info component
  # These update automatically on WiFi state change, with periodic polling reduced to 60s
  # SSID/BSSID/MAC rarely change, so less frequent polling is sufficient
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address
      id: ${device_id}_ip
      update_interval: 60s
    ssid:
      name: ${friendly_name} WiFi SSID
      id: ${device_id}_ssid
      update_interval: 60s
    bssid:
      name: ${friendly_name} WiFi BSSID
      id: ${device_id}_bssid
      update_interval: 60s
    mac_address:
      name: ${friendly_name} WiFi MAC
      id: ${device_id}_mac
      
  # Time sensor requires lambda for date/time formatting (using direct ID reference, no string interpolation)
  # Updates every 30 seconds to reduce unnecessary polling
  - platform: template
    name: ${friendly_name} Time
    id: ${device_id}_time
    update_interval: 30s
    lambda: |-
      char str[17];
      time_t currTime = id(sntp_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return { str };
<<: !include wifi.yaml
